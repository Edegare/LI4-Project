@page "/moveis/registar"
@rendermode InteractiveServer
@using BMManagerLN
@using BMManagerLN.SubMoveis
@inject APIBMManagerLN ln
@inject NavigationManager NavigationManager
@inject MovelTemp movelTemp
@attribute [Authorize(Roles = "Administracao,Modelacao")]

<Titulo Nome="Registar Móvel" />

<div class="InformacoesRegisto">
    <EditForm Model="@movelTemp" OnValidSubmit="@RegistarMovel" FormName="@MovelForm" Enhance>
        <DataAnnotationsValidator />

        <div class="linha">
            <h4>Nome</h4>
            <InputText id="nome" @bind-Value="@movelTemp.NovoMovelNome" />
        </div>
        <div class="Validation">
            <ValidationMessage For="()=> movelTemp.NovoMovelNome" />
        </div>

        <div class="linha-imagem-etapas">
            <!-- Seção de Imagem -->
            <div class="imagem-secao">
                <h4>Imagem</h4>
                <div class="input-imagem">
                    <InputFile id="imagem" OnChange="@OnInputFileChange" />
                </div>
            </div>


            <!-- Seção de Etapas -->
            <div class="etapas-secao">
                <h4>Etapas</h4>
                <h5>@movelTemp.EtapasRegistadas</h5>
                <button type="button" @onclick="AdicionarEtapa">Adicionar</button>
            </div>
        </div>
        <div class="Validation">
            <ValidationMessage For="()=> movelTemp.NovoMovelImagem" />
        </div>

        <div class="imagem-preview">
            @if (!string.IsNullOrEmpty(previewImage))
            {
                <img src="@previewImage" alt="Imagem escolhida" />
            }
            else
            {
                <img src="/imagens/Imagem.png" alt="Imagem" />
            }
        </div>

        <div class="esp"></div>

        <div class="Botoes" >
            <div @onclick="@Voltar">
                <Botao Nome="Voltar" />
            </div>
            <Botao Nome="Registar" />
        </div>
    </EditForm>
</div>

@code {
    private const string MovelForm = "registar-movel";
    private string previewImage = "";

    protected override void OnInitialized()
    {
        // Verifica se há uma imagem no MovelTemp e inicializa o previewImage com ela
        if (movelTemp.NovoMovelImagem != null && movelTemp.NovoMovelImagem.Length > 0)
        {
            previewImage = $"data:image/jpeg;base64,{Convert.ToBase64String(movelTemp.NovoMovelImagem)}";
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            using var memoryStream = new MemoryStream();
            await e.File.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream);
            byte[] imageData = memoryStream.ToArray();
            previewImage = $"data:image/jpeg;base64,{Convert.ToBase64String(imageData)}";

            // Atualiza o modelo com a imagem
            movelTemp.NovoMovelImagem = imageData;
        }
    }

    private void AdicionarEtapa()
    {
        NavigationManager.NavigateTo("/moveis/registar/adicionar_etapa");
    }

    private async Task RegistarMovel()
    {
        Movel movel = new Movel
            {
                Nome = movelTemp.NovoMovelNome,
                Imagem = movelTemp.NovoMovelImagem,
                Quantidade = 0
            };
        try
        {
            await ln.PutMovel(movel);
            int proxima_etapa = -1;
            for (int i = movelTemp.NovoMovelEtapas.Count-1; i >=0; i--){
                int num = movelTemp.NovoMovelEtapas.ElementAt(i).Key;
                byte[] imagem = movelTemp.NovoMovelEtapas.ElementAt(i).Value.Item1;
                List<(int, int)> materiais = movelTemp.NovoMovelEtapas.ElementAt(i).Value.Item3;
                Etapa etapa;
                if(proxima_etapa==-1){
                    etapa = new Etapa
                        {
                            Imagem = imagem,
                            Numero = num,
                            Movel = movel.Numero,
                            Materiais_Necessarios = materiais,
                        };
                }
                else{
                    etapa = new Etapa
                        {
                            Imagem = imagem,
                            Numero = num,
                            Movel = movel.Numero,
                            Materiais_Necessarios = materiais,
                            Proxima_Etapa = proxima_etapa
                        };
                }
                await ln.PutEtapa(etapa);
                movel.Etapas_Montagem.Add(num, etapa.Codigo_Etapa);
                proxima_etapa = etapa.Codigo_Etapa;
            }

            movelTemp.ResetMovelTemp();
            NavigationManager.NavigateTo("/moveis");

        }
        catch (Exception ex)
        {
            // Tratar exceções, como falha na API, e exibir mensagem de erro se necessário
            Console.WriteLine("Erro ao registrar móvel: " + ex.Message);
        }
    }

    private void Voltar()
    {
        movelTemp.ResetMovelTemp();
        NavigationManager.NavigateTo("/moveis");
    }
}

