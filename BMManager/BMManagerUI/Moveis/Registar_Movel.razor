@page "/moveis/registar"
@rendermode InteractiveServer
@using BMManagerLN
@using BMManagerLN.SubMoveis
@inject APIBMManagerLN ln
@inject NavigationManager NavigationManager
@inject MovelTemp movelTemp
@attribute [Authorize(Roles = "Administracao,Modelacao")]

<Titulo Nome="Registar Móvel" />

<div class="InformacoesRegisto">
    <EditForm EditContext="@_contexto" FormName="@MovelForm" Enhance>
        <DataAnnotationsValidator />
        <div class="corpo">
            <div class="linha">
                <h4>Nome</h4>
                <InputText id="nome" @bind-Value="@movelTemp.NovoMovelNome" />
            </div>
            <div class="Validation">
                <ValidationMessage For="()=> movelTemp.NovoMovelNome" />
            </div>

            <div class="linha-imagem-etapas">
                <!-- Seção de Imagem -->
                <div class="imagem-secao">
                    <h4>Imagem</h4>
                    <div class="input-imagem">
                        <InputFile id="imagem" OnChange="@UploadImagem" />
                    </div>
                </div>


                <!-- Seção de Etapas -->
                <div class="etapas-secao">
                    <h4>Etapas</h4>
                    <h5>@movelTemp.EtapasRegistadas</h5>
                    <button type="button" @onclick="AdicionarEtapa">Adicionar</button>
                </div>
            </div>
            <div class="Validation">
                <ValidationMessage For="()=> movelTemp.NovoMovelImagem" />
            </div>

            <div class="imagem-preview">
                @if (!string.IsNullOrEmpty(imagem))
                {
                    <img src="@imagem" alt="Imagem escolhida" />
                }
                else
                {
                    <img src="/imagens/Imagem.png" alt="Imagem" />
                }
            </div>
        </div>
        <div class="esp"></div>

        <div class="Botoes" >
            <div @onclick="@Voltar">
                <Botao Nome="Voltar" />
            </div>
            <Botao Nome="Registar" />
        </div>
    </EditForm>
</div>

@code {
    private const string MovelForm = "registar-movel";
    private string imagem;
    private EditContext _contexto;
    private ValidationMessageStore _mensagens;

    protected override void OnInitialized()
    {
        // Verifica se há uma imagem no MovelTemp e inicializa o imagem com ela
        if (movelTemp.NovoMovelImagem != null && movelTemp.NovoMovelImagem.Length > 0)
        {
            imagem = $"data:image/jpeg;base64,{Convert.ToBase64String(movelTemp.NovoMovelImagem)}";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _contexto = new EditContext(movelTemp);
        _mensagens = new ValidationMessageStore(_contexto);
        _contexto.OnValidationRequested += ValidarAsync;
        await base.OnParametersSetAsync();
    }

    private async void ValidarAsync(object? sender, ValidationRequestedEventArgs e)
    {
        _mensagens.Clear(() => movelTemp.NovoMovelImagem);
        _mensagens.Clear(() => movelTemp.NovoMovelNome);
        _contexto.NotifyValidationStateChanged();
        StateHasChanged();
        bool valido = true;
        if (movelTemp.NovoMovelNome == null)
        {
            _mensagens.Add(() => movelTemp.NovoMovelNome, "O campo Nome é obrigatório!");
            valido = false;
        }
        else if (movelTemp.NovoMovelNome.Length > 75)
        {
            _mensagens.Add(() => movelTemp.NovoMovelNome, "Nome não pode ter mais de 75 carateres!");
            valido = false;
        }
        if (movelTemp.NovoMovelImagem == null)
        {
            _mensagens.Add(() => movelTemp.NovoMovelImagem, "O campo Imagem é obrigatório!");
            valido = false;
        }
        if (valido)
        {
            await RegistarMovel();
        }
        _contexto.NotifyValidationStateChanged();
        StateHasChanged();
    }

    private async Task UploadImagem(InputFileChangeEventArgs e)
    {
        _mensagens.Clear(() => movelTemp.NovoMovelImagem);
        _contexto.NotifyValidationStateChanged();
        StateHasChanged();
        var ficheiro = e.File;
        if (ficheiro != null && (ficheiro.ContentType == "image/jpeg" || ficheiro.ContentType == "image/png" || ficheiro.ContentType == "image/gif" || ficheiro.ContentType == "image/bmp" || ficheiro.ContentType == "image/webp"))
        {
            var buffer = new byte[8294400];
            await ficheiro.OpenReadStream().ReadAsync(buffer);

            imagem = $"data:{ficheiro.ContentType};base64,{Convert.ToBase64String(buffer)}";
            movelTemp.NovoMovelImagem = buffer;
        }
        else
        {
            imagem = null;
            movelTemp.NovoMovelImagem = null;
            _mensagens.Add(() => movelTemp.NovoMovelImagem, "Selecione uma imagem válida, formatos suportados: jpeg, png, gif, bmp, webp");
            _contexto.NotifyValidationStateChanged();
            StateHasChanged();
        }
    }

    private void AdicionarEtapa()
    {
        NavigationManager.NavigateTo("/moveis/registar/adicionar_etapa");
    }

    private async Task RegistarMovel()
    {
        Movel movel = new Movel
            {
                Nome = movelTemp.NovoMovelNome,
                Imagem = movelTemp.NovoMovelImagem,
                Quantidade = 0
            };
        try
        {
            await ln.PutMovel(movel);
            int proxima_etapa = -1;
            for (int i = movelTemp.NovoMovelEtapas.Count-1; i >=0; i--){
                int num = movelTemp.NovoMovelEtapas.ElementAt(i).Key;
                byte[] imagem = movelTemp.NovoMovelEtapas.ElementAt(i).Value.Item1;
                List<(int, int)> materiais = movelTemp.NovoMovelEtapas.ElementAt(i).Value.Item3;
                Etapa etapa;
                if(proxima_etapa==-1){
                    etapa = new Etapa
                        {
                            Imagem = imagem,
                            Numero = num,
                            Movel = movel.Numero,
                            Materiais_Necessarios = materiais,
                        };
                }
                else{
                    etapa = new Etapa
                        {
                            Imagem = imagem,
                            Numero = num,
                            Movel = movel.Numero,
                            Materiais_Necessarios = materiais,
                            Proxima_Etapa = proxima_etapa
                        };
                }
                await ln.PutEtapa(etapa);
                movel.Etapas_Montagem.Add(num, etapa.Codigo_Etapa);
                proxima_etapa = etapa.Codigo_Etapa;
            }

            // Associa os materiais às etapas
            foreach (var etapaTemp in movelTemp.NovoMovelEtapas)
            {
                int numeroEtapa = etapaTemp.Key;
                var materiais = etapaTemp.Value.Item3;

                if (movel.Etapas_Montagem.TryGetValue(numeroEtapa, out var codigoEtapa))
                {
                    foreach (var (idMaterial, quantidade) in materiais)
                    {
                        await ln.AdicionaMaterialEtapa(idMaterial, quantidade, codigoEtapa);
                    }
                }
            }

            movelTemp.ResetMovelTemp();
            NavigationManager.NavigateTo("/moveis");

        }
        catch (Exception ex)
        {
            // Tratar exceções, como falha na API, e exibir mensagem de erro se necessário
            Console.WriteLine("Erro ao registrar móvel: " + ex.Message);
        }
    }

    private void Voltar()
    {
        movelTemp.ResetMovelTemp();
        NavigationManager.NavigateTo("/moveis");
    }
}

