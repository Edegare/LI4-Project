@page "/moveis/registar/adicionar_etapa"
@rendermode InteractiveServer
@using BMManagerLN
@using BMManagerLN.SubMateriais
@using BMManagerLN.SubMoveis
@inject APIBMManagerLN ln
@inject NavigationManager NavigationManager
@inject MovelTemp movelTemp
@attribute [Authorize(Roles = "Administracao,Modelacao")]

<Titulo Nome="Adicionar etapa" />

<div class="InformacoesRegisto">
    <EditForm Model="@movelTemp" OnValidSubmit="@RegistarEtapa">

        <div class="linha-imagem-material">

            <!-- Coluna da imagem -->
            <div class="imagem">
                <div class="parte-imagem">
                    <h4>Imagem</h4>
                    <div class="input-imagem">
                        <InputFile id="imagem" OnChange="@OnInputFileChange" />
                        <div>
                            @if (!string.IsNullOrEmpty(erroImagem))
                            {
                                <div class="erro-material">
                                    <p>@erroImagem</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="imagem-preview">
                    @if (!string.IsNullOrEmpty(previewImage))
                    {
                        <img src="@previewImage" alt="Imagem escolhida" />
                    }
                    else
                    {
                        <img src="/imagens/Imagem.png" alt="ImagemInicial" />
                    }
                </div>
            </div>

            <!-- Coluna dos Materiais -->
            <div class="material">
                <div class="parte-material">
                    <h4>Materiais</h4>
                    <div class="inputs-materiais">
                        <!-- Campo de ID do Material -->
                        <div class="input-container">
                            <div class="input">
                                <InputNumber id="materialId" @bind-Value="@novoMaterialId" placeholder="ID Material" min="0" />
                            </div>
                            @if (!string.IsNullOrEmpty(erroMaterial))
                            {
                                <div class="erro-material">
                                    <p>@erroMaterial</p>
                                </div>
                            }
                        </div>

                        <!-- Campo de Quantidade -->
                        <div class="input-container">
                            <div class="input">
                                <InputNumber id="materialQuantidade" @bind-Value="@novoMaterialQuantidade" placeholder="Quantidade" min="0" />
                            </div>
                            @if (!string.IsNullOrEmpty(erroQuantidade))
                            {
                                <div class="erro-material">
                                    <p>@erroQuantidade</p>
                                </div>
                            }
                        </div>

                        <!-- Botão -->
                        <button type="button" @onclick="AdicionarMaterial">Adicionar</button>
                    </div>
                </div>
                <!-- Tabela -->
                <div class="tabela">
                    <ul>
                        @foreach ((int idMaterial, int quantidade) in materiais)
                        {
                            var material = materiaisDisponiveis.FirstOrDefault(m => m.Numero == idMaterial);
                            <div class="linha-material">
                                <div>@idMaterial</div>
                                <div class="coluna">@material?.Nome</div>
                                <div class="coluna">@quantidade</div>
                                <div class="coluna-botao">
                                    <button type="button" @onclick="() => RemoverMaterial(idMaterial)">-</button>
                                </div>
                            </div>
                        }
                    </ul>
                </div>
                @if (!string.IsNullOrEmpty(erroNaoExiste))
                {
                    <div class="erro-tabela mostrar">
                        <p>@erroNaoExiste</p>
                    </div>
                }
                else
                {
                    <div class="erro-tabela"></div>
                }
            </div>

        </div>

        <div class="esp"></div>

        <div class="Botoes">
            <Botao Nome="Voltar" Url="moveis/registar" />
            <Botao Nome="Registar" />
        </div>
    </EditForm>
</div>

@code {

    private byte[] imagem = Array.Empty<byte>();
    private List<(int, int)> materiais = new List<(int, int)>();

    private int novoMaterialId = 0;
    private int novoMaterialQuantidade = 0;

    private string previewImage = "";

    private string erroMaterial = "";  
    private string erroQuantidade = ""; 
    private string erroImagem = "";
    private string erroNaoExiste = "";

    private List<Material> materiaisDisponiveis = new List<Material>();

    protected override async Task OnInitializedAsync()
    {
        materiaisDisponiveis = await ln.GetMateriais();
    }

    private void RemoverMaterial(int idMaterial)
    {
        materiais.RemoveAll(m => m.Item1 == idMaterial);
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        erroMaterial = "";
        erroQuantidade = "";
        erroImagem = "";
        erroNaoExiste = "";
        if (e.File != null)
        {
            using var memoryStream = new MemoryStream();
            await e.File.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream);
            byte[] imageData = memoryStream.ToArray();
            imagem = memoryStream.ToArray();
            previewImage = $"data:image/jpeg;base64,{Convert.ToBase64String(imageData)}";
        }
    }

    private async Task RegistarEtapa()
    {
        erroMaterial = "";
        erroQuantidade = "";
        erroImagem = "";
        erroNaoExiste = "";

        if (imagem == null || imagem.Length == 0)
        {
            erroImagem = "Imagem é obrigatória!";
            return;
        }


        movelTemp.EtapasRegistadas += 1;
        movelTemp.NovoMovelEtapas.Add(movelTemp.EtapasRegistadas, (imagem, movelTemp.EtapasRegistadas, materiais));
        NavigationManager.NavigateTo("/moveis/registar");
    }

    private void AdicionarMaterial()
    {
        // Resetando as mensagens de erro
        erroMaterial = "";
        erroQuantidade = "";
        erroImagem = "";
        erroNaoExiste = "";

        // Validação dos campos
        if (novoMaterialId <= 0)
        {
            
            erroMaterial = "O ID deve ser um valor positivo.";
        }

        if (novoMaterialQuantidade <= 0)
        {
            
            erroQuantidade = "A quantidade deve ser um valor positivo.";
        }

        // Existe material?
        var materialDisponivel = materiaisDisponiveis.FirstOrDefault(m => m.Numero == novoMaterialId);

        if (materialDisponivel == null)
        {
            erroNaoExiste = $"O material com ID {novoMaterialId} não existe.";
            return;
        }
        if (novoMaterialId > 0 && novoMaterialQuantidade > 0)
        {
            
            var materialExistente = materiais.FirstOrDefault(m => m.Item1 == novoMaterialId);

            if (materialExistente != default)
            {
                
                var index = materiais.IndexOf(materialExistente);
                materiais[index] = (novoMaterialId, materialExistente.Item2 + novoMaterialQuantidade);
            }
            else
            {
                
                materiais.Add((novoMaterialId, novoMaterialQuantidade));
            }
        }

        // Força a renderização para exibir as mensagens de erro
        StateHasChanged();
    }

}
