@page "/materiais/registar"
@rendermode InteractiveServer
@using BMManagerLN
@using BMManagerLN.SubMateriais
@inject APIBMManagerLN ln
@attribute [Authorize(Roles = "Administracao,Modelacao")]

<Titulo Nome="Registar novo material" />

<div class="InformacoesRegisto">
    <EditForm Model="@novoMaterial" OnValidSubmit="@RegistarMaterial" FormName="registarMaterial">
        <DataAnnotationsValidator />
        <div class = "linha">
            <h4>Nome</h4>
            <InputText id="nome" @bind-Value="@novoMaterial.Nome" />
            <ValidationMessage For="()=> novoMaterial.Nome" id="validacaoNome" />
        </div>
        <div class="linha">
            <h4>Imagem</h4>
            <InputFile id="imagem" OnChange="@UploadImagem" @bind-Value="@imagem" />
            @foreach (var mensagem in _contexto.GetValidationMessages())
            {
                <p>@mensagem</p>
            }
        </div>
        @if (!string.IsNullOrEmpty(imagem))
        {
            <div>
                <img src=@imagem/>
            </div>
        }
        else
        {
            <img src="/imagens/Imagem.png" alt="Imagem" />
        }
        <div class = "esp">
        </div>
        <div class="Botoes">
            <Botao Nome="Voltar" Url="materiais" />
            <Botao Nome="Registar"/>
        </div>
    </EditForm>
</div>

@code {
    private string imagem = "";
    private EditContext _contexto;
    private ValidationMessageStore _mensagens;

    protected override async Task OnInitializedAsync()
    {
        _contexto = new EditContext(imagem);
        _mensagens = new ValidationMessageStore(_contexto);
    }

    private async Task UploadImagem(InputFileChangeEventArgs e)
    {
        _mensagens.Clear(() => imagem);
        var ficheiro = e.File;
        if (ficheiro != null && (ficheiro.ContentType == "image/jpeg" || ficheiro.ContentType == "image/png" || ficheiro.ContentType == "image/gif" || ficheiro.ContentType == "image/bmp" || ficheiro.ContentType == "image/webp"))
        {
            var buffer = new byte[8294400];
            await ficheiro.OpenReadStream().ReadAsync(buffer);

            imagem = $"data:{ficheiro.ContentType};base64,{Convert.ToBase64String(buffer)}";
            novoMaterial.Imagem = buffer;
        }
        else{
            imagem = null;
            novoMaterial.Imagem = null;
            _mensagens.Add(() => imagem, "Selecione uma imagem válida, formatos suportados: jpeg, png, gif, bmp, webp");
        }
        _contexto.NotifyValidationStateChanged();
        StateHasChanged();
    }

    private Material novoMaterial = new Material();

    private async Task RegistarMaterial()
    {
        Material material = new Material
        {
            Nome = novoMaterial.Nome,
            Imagem = novoMaterial.Imagem
        };
        await ln.PutMaterial(material);

        novoMaterial = new Material();
    }
}
