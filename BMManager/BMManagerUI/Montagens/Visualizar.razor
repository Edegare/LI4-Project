@page "/montagens/visualizar/{_codMontagem:int}"
@using BMManagerLN
@using BMManagerLN.SubMontagens
@using BMManagerLN.SubMoveis
@using BMManagerLN.SubMateriais
@using BMManagerLN.SubFuncionarios
@inject APIBMManagerLN ln
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administracao,Montagem,Armazem,Recursos_Humanos")]

<Titulo Nome="Visualizar Montagem" />

<div class="Visualizar">
    @if (_montagem == null || _movel == null || _etapas == null || _materiaisUtilizados == null || _materiaisPorUtilizar == null || _funcionarios == null)
    {
        <p>A carregar montagem ...</p>
    }
    else
    {
        <div class="Montagem">
            <div class="Informacoes">
                <p>Número<span>@_montagem.Numero</span></p>
                <p>Móvel<span>@_movel.Nome</span></p>
                <p>Número<span>@_montagem.Movel</span></p>
                <p>Estado<span>@ln.GetDescricao(_montagem.Estado)</span></p>
                <p>Data Início<span>@_montagem.Data_Inicial.ToString("HH\\h:mm dd/MM/yyyy")</span></p>
                <p>Etapa<span>@_etapaAtual.Numero / @_etapas.Count</span></p>
                <p>Data Fim<span>@(_montagem.Data_Final != null ? _montagem.Data_Final?.ToString("HH\\h:mm dd/MM/yyyy") : "-")</span></p>
                <p>Encomenda<span>@(_montagem.Encomenda != null ? _montagem.Encomenda : "-")</span></p>
                <p>Duração
                    @{
                        TimeSpan tempo = (TimeSpan)_montagem.Duracao;
                        if (tempo.TotalMinutes > 60)
                        {
                            <span>@(tempo.ToString("%h\\h\\ %m\\m") ?? "-")</span>
                        }
                        else if (tempo.TotalSeconds > 60)
                        {
                            <span>@(tempo.ToString("mm\\m\\ ss\\s") ?? "-")</span>
                        }
                        else
                        {
                            <span>@(tempo.ToString("ss\\s") ?? "-")</span>
                        }
                    }
                </p>
                <div class="CaixaInformacoes">
                    <p>Materiais utilizados</p>
                    <div class="CaixaUtilizados">
                        <span>Código</span>
                        <span>Nome</span>
                        <span>Quantidade</span>
                        @foreach (KeyValuePair<Material, int> m in _materiaisUtilizados)
                        {
                            <span>@m.Key.Numero</span>
                            <span>@m.Key.Nome</span>
                            <span>@m.Value</span>
                        }
                    </div>
                </div>
                <div class="CaixaInformacoes">
                    <p>Materiais necessários</p>
                    <div class="CaixaPorUtilizar">
                        <span>Código</span>
                        <span>Nome</span>
                        <span>Quantidade</span>
                        @foreach (KeyValuePair<Material, int> m in _materiaisPorUtilizar)
                        {
                            <span>@m.Key.Numero</span>
                            <span>@m.Key.Nome</span>
                            <span>@m.Value</span>
                        }
                    </div>
                </div>
            <div class="CaixaInformacoes">
                    <p>Funcionários</p>
                    <div class="CaixaFuncionarios">
                        <span>Código</span>
                        <span>Nome</span>
                        @foreach (Funcionario f in _funcionarios)
                        {
                            <span>@f.Codigo_Utilizador</span>
                            <span>@f.Nome</span>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="Botao">
        <Botao Nome="Voltar" Url="montagens" />
    </div>
</div>

@code {
    [Parameter]
    public int _codMontagem { get; set; }
    private Montagem? _montagem;
    private Movel? _movel;
    private Dictionary<int,Etapa>? _etapas;
    private Etapa _etapaAtual;
    private Dictionary<Material,int>? _materiaisUtilizados;
    private Dictionary<Material, int>? _materiaisPorUtilizar;
    private List<Funcionario>? _funcionarios;

    protected override async Task OnInitializedAsync()
    {
        _montagem = await ln.GetMontagem(_codMontagem);
        _movel = await ln.GetMovelSemImagem(_montagem.Movel);
        _etapas = await ln.GetEtapasMovelSemImagens(_montagem.Movel);
        _etapaAtual = _etapas.Values.FirstOrDefault(e => e.Codigo_Etapa == _montagem.Etapa);
        _materiaisUtilizados = await ln.MateriaisUtilizadosMontagem(_codMontagem);
        _materiaisPorUtilizar = await ln.MateriaisPorUtilizarMontagem(_codMontagem);
        _funcionarios = await ln.FuncionariosParticipamMontagem(_codMontagem);
    }
}
