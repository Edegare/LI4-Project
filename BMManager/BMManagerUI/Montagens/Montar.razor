@page "/montagens/montar/{_codMontagem:int}"
@rendermode InteractiveServer
@using BMManagerLN
@using BMManagerLN.SubMontagens
@using BMManagerLN.SubMoveis
@using BMManagerLN.SubMateriais
@inject APIBMManagerLN ln
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider asp
@attribute [Authorize(Roles = "Administracao,Montagem")]


<div class="MontagemDeEtapa">
    @if (_etapa == null || _montagem == null)
    {
        <p>A carregar etapa ...</p>
    }
    else
    {
        <div class="Etapa">
            <div class="ImagemEtapaMontagem">
                <EtapaMontagem Etapa="@_etapa" Materiais="_materiais_quantidade" />
            </div>
            <div class="Botoes">
                <Botao Nome="Sair" Metodo="SairMontagem" /> <!-- Alterar para confirmação -->
                <Botao Nome="Terminar Etapa" Metodo="TerminarEtapa" />
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public int _codMontagem { get; set; }
    private Montagem? _montagem;
    private Etapa? _etapa;
    private DateTime _dataInicio;
    private int _codFucionario;
    private List<(Material, int)> _materiais_quantidade;

    protected override async Task OnInitializedAsync()
    {
        _montagem = await ln.GetMontagem(_codMontagem);
        if (_montagem.Estado == Estado.Em_Pausa)
        {
            int.TryParse((await asp.GetAuthenticationStateAsync()).User.FindFirst(ClaimTypes.NameIdentifier).Value, out _codFucionario);
            await ln.ContinuaEtapaMontagem(_montagem, _codFucionario);
        }
        _etapa = await ln.GetEtapa(_montagem.Etapa);
        _dataInicio = DateTime.Now;
        _materiais_quantidade = await ln.GetMateriaisEtapaLista(_etapa.Codigo_Etapa);
    }

    private async void TerminarEtapa()
    {
        _montagem.Duracao += DateTime.Now - _dataInicio;
        await ln.TerminaEtapaMontagem(_montagem);
        if (await ln.MontagemTemMaisEtapas(_montagem))
        {
            NavigationManager.NavigateTo($"/montagens/montar/{_codMontagem}/etapaterminada");
        }
        else
        {
            NavigationManager.NavigateTo($"/montagens/montar/{_codMontagem}/montagemterminada");
        }
    }

    private async void SairMontagem()
    {
        _montagem.Duracao += DateTime.Now - _dataInicio;
        await ln.SairEtapaMontagem(_montagem);
        NavigationManager.NavigateTo($"/montagens");
    }
}
