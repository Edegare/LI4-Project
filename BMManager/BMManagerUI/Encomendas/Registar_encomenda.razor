@page "/encomendas/registar"
@rendermode InteractiveServer
@using BMManagerLN
@using BMManagerLN.SubEncomendas
@using BMManagerLN.SubMoveis
@inject APIBMManagerLN ln
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administracao,Encomendas")]

<Titulo Nome="Registar nova encomenda" />

<div class="InformacoesRegisto">
    <EditForm Model="@novaEncomenda" OnValidSubmit="@RegistarEncomenda">
        <DataAnnotationsValidator />
        <div class="corpo">
            <div>
                <div class="linha">
                    <h4>Cliente</h4>
                    <InputText id="cliente" @bind-Value="@novaEncomenda.Cliente" />
                </div>
                <div class="Validation">
                    <ValidationMessage For="()=> novaEncomenda.Cliente" id="validacaoCliente" />
                </div>
            </div>
            <div>
                <div class="linha">
                    <h4>Data Prevista</h4>
                    <InputDate id="data" @bind-Value="@data" />
                </div>
                <div class="Validation">
                    <ValidationMessage For="()=> novaEncomenda.Data_Prevista" id="validacaoData" />
                </div>
            </div>
            <div class="linha-moveis">
                <div class="linha">
                    <h4>Móveis</h4>
                    <InputNumber id="id" @bind-Value="@novoMovelId" min="0" />
                    <InputNumber id="quantidade" @bind-Value="@novoMovelQuantidade" min="0" />
                    <button type="button" @onclick="AdicionarMovel">Adicionar</button>
                </div>
                <div class="Validation">
                    @if (!string.IsNullOrEmpty(erro))
                    {
                        <p>@erro</p>
                    }
                </div>
            </div>
            <div>
                <ul>
                    @for(int i = 0; i<@moveis.Count; i++){
                        int index = i;
                        <li>@moveis.ElementAt(i).Item1  @nomesMoveis.ElementAt(i) @moveis.ElementAt(i).Item2</li>
                        <button type="button" @onclick="(() => RemoverMovel(index))">-</button>
                    }
                </ul>
            </div>
        </div>
        <div class = "esp">
        </div>
        <div class="Botoes">
            <Botao Nome="Voltar" Url="encomendas" />
            <Botao Nome="Registar"/>
        </div>
    </EditForm>
</div>

@code {
    private Encomenda novaEncomenda = new Encomenda();
    private List<(int, int)> moveis = new List<(int, int)>();
    private List<string> nomesMoveis = new List<string>();
    private string erro = "";
    private string erroRegisto = "";
    private DateOnly data = DateOnly.FromDateTime(DateTime.Today);

    private async Task RegistarEncomenda()
    {
        erro = "";
        erroRegisto = "";

        if (!moveis.Any())
        {
            erro = "A lista de móveis não pode ser vazia.";
            return;
        }
        Encomenda encomenda = new Encomenda
        {
            Cliente = novaEncomenda.Cliente,
            Data_Prevista = data
        };
        await ln.PutEncomenda(encomenda);
        foreach ((int id, int quantidade) in moveis){
            await ln.AdicionaMovelEncomenda(id, quantidade, encomenda.Numero);
        }

        novaEncomenda = new Encomenda();

        NavigationManager.NavigateTo("/encomendas");
    }
    private int novoMovelId = 0;
    private int novoMovelQuantidade = 0;
    private Movel? movel;

    private async Task AdicionarMovel()
    {
        erro = "";

        if (novoMovelId == 0 || novoMovelQuantidade == 0) {
            erro = "Por favor, insira valores positivos!";
            return;
        }

        movel = await ln.GetMovel(novoMovelId);
        if(movel!=null){
            var movelExistente = moveis.FirstOrDefault(m => m.Item1 == novoMovelId);

            if (movelExistente != default)
            {

                var index = moveis.IndexOf(movelExistente);
                moveis[index] = (novoMovelId, movelExistente.Item2 + novoMovelQuantidade);
            }
            else
            {

                moveis.Add((novoMovelId, novoMovelQuantidade));
            }
            nomesMoveis.Add(movel.Nome);
            novoMovelId = 0;
            novoMovelQuantidade = 0;
        }
        else{
            erro = $"Móvel com ID {novoMovelId} não existe!";
            novoMovelId = 0;
            novoMovelQuantidade = 0;
        }
    }
    private void RemoverMovel(int i)
    {
        moveis.RemoveAt(i);
        nomesMoveis.RemoveAt(i);
    }
}
