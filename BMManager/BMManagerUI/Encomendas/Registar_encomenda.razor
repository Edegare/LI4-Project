@page "/encomendas/registar"
@rendermode InteractiveServer
@using BMManagerLN
@using BMManagerLN.SubEncomendas
@using BMManagerLN.SubMoveis
@inject APIBMManagerLN ln
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administracao,Encomendas")]

<Titulo Nome="Registar nova encomenda" />

<div class="InformacoesRegisto">
    <EditForm Model="@novaEncomenda" OnValidSubmit="@RegistarEncomenda">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <h4>Cliente</h4>
            <InputText id="cliente" @bind-Value="@novaEncomenda.Cliente" />
        </div>
        <div>
            <h4>Data Prevista</h4>
            <InputDate id="data" @bind-Value="@data" />
        </div>
        <div>
            <h4>Móveis</h4>
            <InputNumber id="id" @bind-Value="@novoMovelId" min="0"/>
            <InputNumber id="quantidade" @bind-Value="@novoMovelQuantidade" min="0" />
            <button type="button" @onclick="AdicionarMovel">Adicionar</button>

        </div>
        @if (!string.IsNullOrEmpty(erro))
        {
            <p>@erro</p>
        }
        <div>
            <ul>
                @for(int i = 0; i<@moveis.Count; i++){
                    int index = i;
                    <li>@moveis.ElementAt(i).Item1  @nomesMoveis.ElementAt(i) @moveis.ElementAt(i).Item2</li>
                    <button type="button" @onclick="(() => RemoverMovel(index))">-</button>
                }
            </ul>
        </div>
        <div class = "esp">
        </div>
        <div class="Botoes">
            <Botao Nome="Voltar" Url="encomendas" />
            <Botao Nome="Registar"/>
        </div>
    </EditForm>
</div>

@code {
    private Encomenda novaEncomenda = new Encomenda();
    private List<(int, int)> moveis = new List<(int, int)>();
    private List<string> nomesMoveis = new List<string>();
    private string erro = "";
    private DateOnly data = DateOnly.FromDateTime(DateTime.Today);
    private async Task RegistarEncomenda()
    {
        Encomenda encomenda = new Encomenda
        {
            Cliente = novaEncomenda.Cliente,
            Data_Prevista = data,
            Moveis_Pedidos = moveis
        };
        await ln.PutEncomenda(encomenda);
        foreach ((int id, int quantidade) in moveis){
            await ln.AdicionaMovelEncomenda(id, quantidade, encomenda.Numero);
        }

        novaEncomenda = new Encomenda();

        NavigationManager.NavigateTo("/encomendas");
    }
    private int novoMovelId;
    private int novoMovelQuantidade;
    private Movel movel;

    private async Task AdicionarMovel()
    {
        movel = await ln.GetMovel(novoMovelId);
        if(movel!=null){
            moveis.Add((novoMovelId, novoMovelQuantidade));
            nomesMoveis.Add(movel.Nome);
            novoMovelId = 0;
            novoMovelQuantidade = 0;
            erro = ""; 
        }
        else{
            erro = "Móvel não existe";
            novoMovelId = 0;
            novoMovelQuantidade = 0;
        }
    }
    private void RemoverMovel(int i)
    {
        moveis.RemoveAt(i);
        nomesMoveis.RemoveAt(i);
    }
}
